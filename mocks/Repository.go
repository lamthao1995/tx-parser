// Code generated by mockery v2.49.1. DO NOT EDIT.

package mocks

import (
	domain "tx-parser/domain"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetTransactions provides a mock function with given fields: address
func (_m *Repository) GetTransactions(address string) ([]domain.Transaction, error) {
	ret := _m.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactions")
	}

	var r0 []domain.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]domain.Transaction, error)); ok {
		return rf(address)
	}
	if rf, ok := ret.Get(0).(func(string) []domain.Transaction); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveTransaction provides a mock function with given fields: address, tx
func (_m *Repository) SaveTransaction(address string, tx domain.Transaction) error {
	ret := _m.Called(address, tx)

	if len(ret) == 0 {
		panic("no return value specified for SaveTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, domain.Transaction) error); ok {
		r0 = rf(address, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscribe provides a mock function with given fields: address
func (_m *Repository) Subscribe(address string) error {
	ret := _m.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(address)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
